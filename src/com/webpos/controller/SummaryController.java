package com.webpos.controller;import com.api.vo.contans.PlayQuery;import com.api.vo.contans.ReturnSummarySelfPlay;import com.api.vo.contans.SelfPlayQuery;import com.api.vo.contans.SharePlayQuery;import com.api.vo.contans.SummaryPlay;import com.api.vo.contans.SummarySelfPlay;import com.api.vo.contans.SummarySharePlay;import com.api.vo.contans.SummaryUsers;import com.api.vo.contans.SummaryWithdraw;import com.api.vo.contans.UserQuery;import com.api.vo.contans.WithdrawQuery;import com.webpos.dao.SystemMapper;import com.webpos.entity.User;import com.webpos.service.AccountService;import com.webpos.service.AdminService;import com.webpos.service.DetailsService;import com.webpos.service.SystemService;import com.webpos.service.UserService;import com.webpos.tools.CommUtil;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;@Controllerpublic class SummaryController  extends ApiWebABaseController{  private Logger log = Logger.getLogger(getClass());  @Autowired  private AdminService adminService;  @Autowired  private UserService userService;  @Autowired  private AccountService accountService;  @Autowired  private SystemService systemService;  @Autowired  private DetailsService detailService;  @Resource  private SystemMapper systemDao;    @RequestMapping({"/summary_self_play.do"})  @ResponseBody  public ReturnSummarySelfPlay summary_self_play()  {    ReturnSummarySelfPlay ssp = new ReturnSummarySelfPlay();    if (!super.isLogin())    {      ssp.setResult("error_login_first");      return ssp;    }    User u = super.getLoginUser();    String flag = "FAIL";        SelfPlayQuery uq = new SelfPlayQuery();    uq.setType("join");    uq.setUser_id(u.getUser_id());    SummarySelfPlay s1 = this.detailService.summarySelfPlay(uq);        SelfPlayQuery uq2 = new SelfPlayQuery();    uq2.setType("win");    uq2.setUser_id(u.getUser_id());    SummarySelfPlay s2 = this.detailService.summarySelfPlay(uq2);        ssp.setAmount(s1.getAmount().replaceAll("-", ""));    ssp.setWin_amount(s2.getAmount());        double win_int = CommUtil.div(Integer.valueOf(s2.getNumcount()), Integer.valueOf(s2.getNumcount() + s1.getNumcount()));    double win_rate = CommUtil.mul(Double.valueOf(win_int), Integer.valueOf(100));    ssp.setWin_rate(win_rate + "%");    flag = "SUCCESS";    ssp.setResult(flag);    return ssp;  }    @RequestMapping({"/summary_share_play.do"})  @ResponseBody  public SummarySharePlay summary_share_play()  {    SummarySharePlay ssp = new SummarySharePlay();    if (!super.isLogin())    {      ssp.setResult("error_login_first");      return ssp;    }    User u = super.getLoginUser();    String flag = "FAIL";        SharePlayQuery uq = new SharePlayQuery();    uq.setType("join");    uq.setUser_id(u.getUser_id());    ssp = this.detailService.summarySharePlay(uq);    flag = "SUCCESS";    ssp.setResult(flag);    return ssp;  }    @RequestMapping({"/summary_play.do"})  @ResponseBody  public SummaryPlay summary_play(@RequestParam(value="type", required=false) String type, @RequestParam(value="startDate", required=false) String startDate, @RequestParam(value="endDate", required=false) String endDate, @RequestParam(value="jc", required=false) String jc)  {    SummaryPlay result = new SummaryPlay();    String flag = "FAIL";        PlayQuery uq = new PlayQuery();    uq.setEndDate(endDate);    uq.setStartDate(startDate);    uq.setType(type);    uq.setUser_id(jc);    result = this.detailService.summaryPlay(uq);    flag = "SUCCESS";    result.setResult(flag);    return result;  }    @RequestMapping({"/summary_withdraw.do"})  @ResponseBody  public SummaryWithdraw summary_withdraw(@RequestParam(value="type", required=false) String type, @RequestParam(value="status", required=false) String status, @RequestParam(value="startDate", required=false) String startDate, @RequestParam(value="endDate", required=false) String endDate, @RequestParam(value="jc", required=false) String jc)  {    SummaryWithdraw result = new SummaryWithdraw();    String flag = "FAIL";    if ((type != null) && (type.equals("in")))    {      type = "in";      status = "success";    }    else    {      type = "withdraw";    }    WithdrawQuery uq = new WithdrawQuery();    uq.setEndDate(endDate);    uq.setStartDate(startDate);    uq.setStatus(status);    uq.setType(type);    uq.setUser_id(jc);    result = this.accountService.summaryWithdraw(uq);    flag = "SUCCESS";    result.setResult(flag);    return result;  }    @RequestMapping({"/summary_users.do"})  @ResponseBody  public SummaryUsers summary_users(@RequestParam(value="type", required=false) String type, @RequestParam(value="startDate", required=false) String startDate, @RequestParam(value="endDate", required=false) String endDate, @RequestParam(value="jc", required=false) String jc)  {    SummaryUsers result = new SummaryUsers();    String flag = "FAIL";    String user_id = "";    String parent_id = "";    if ((type != null) && (type.equals("parent")))    {      user_id = "";      parent_id = jc;    }    else    {      user_id = jc;      parent_id = "";    }    UserQuery uq = new UserQuery();    uq.setEndDate(endDate);    uq.setStartDate(startDate);    uq.setParent(parent_id);    uq.setUser_id(user_id);    result = this.userService.summaryUsers(uq);    flag = "SUCCESS";    result.setResult(flag);    return result;  }}