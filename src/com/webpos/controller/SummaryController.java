package com.webpos.controller;import java.util.List;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import com.api.vo.contans.PlayQuery;import com.api.vo.contans.ReturnSummarySelfPlay;import com.api.vo.contans.SelfPlayQuery;import com.api.vo.contans.SharePlayQuery;import com.api.vo.contans.SummaryPlay;import com.api.vo.contans.SummarySelfPlay;import com.api.vo.contans.SummarySharePlay;import com.api.vo.contans.SummaryUsers;import com.api.vo.contans.SummaryWithdraw;import com.api.vo.contans.UserQuery;import com.api.vo.contans.WithdrawQuery;import com.webpos.dao.SystemMapper;import com.webpos.entity.Award;import com.webpos.entity.Detail;import com.webpos.entity.DetailExample;import com.webpos.entity.TestDetail;import com.webpos.entity.TestDetailExample;import com.webpos.entity.User;import com.webpos.service.AccountService;import com.webpos.service.AdminService;import com.webpos.service.AwardService;import com.webpos.service.DetailService;import com.webpos.service.DetailsService;import com.webpos.service.SystemService;import com.webpos.service.TestDetailService;import com.webpos.service.UserService;import com.webpos.tools.CommUtil;import com.webpos.tools.Pagination;@Controllerpublic class SummaryController extends ApiWebABaseController {	private Logger log = Logger.getLogger(getClass());	@Autowired	private AdminService adminService;	@Autowired	private AwardService awardService;	@Autowired	private UserService userService;	@Autowired	private AccountService accountService;	@Autowired	private SystemService systemService;	@Autowired	private DetailsService detailsService;	@Autowired	private DetailService detailService;	@Autowired	private TestDetailService testdetailService;	@Resource	private SystemMapper systemDao;	/**	 * 获取开奖结果	 * 	 * @return	 */	@RequestMapping({ "/getResult.do" })	@ResponseBody	public KaijiangResultReturnData getResult(HttpServletRequest request) {		KaijiangResultReturnData ssp = new KaijiangResultReturnData();		if (!super.isLogin()) {			ssp.setResult("请先登录");			return ssp;		}		String qiname = request.getParameter("qiname");		if (qiname == null || qiname.length() <= 0) {			ssp.setResult("期号不存在");			return ssp;		}		Award a = awardService.getByName(qiname);		if (a == null) {			ssp.setResult("该期尚未开奖");			return ssp;		}		ssp.setAwards(a);		User u = super.getLoginUser();		DetailExample meExamplee = new DetailExample();		meExamplee.clear();		meExamplee.setPageSize(11);		meExamplee.setOrderByClause("number asc");		meExamplee.setPageNo(Pagination.cpn(Integer.valueOf(CommUtil.null2Int(1))));		DetailExample.Criteria criteria = meExamplee.createCriteria();		criteria.andQinameEqual(qiname);		criteria.andUserIdEqual(u.getUser_id());		Pagination pList = detailService.getObjectListWithPage(meExamplee);		List<Detail> details = (List<Detail>) pList.getList();		Double amount = 0.0;		Double award = 0.0;		for (Detail d : details) {			amount = CommUtil.add(amount, d.getAmount());			award = CommUtil.add(award, d.getAward());		}		ssp.setAmount(amount);		ssp.setAward(award);		ssp.setDetails(details);		ssp.setResult("SUCCESS");		return ssp;	}	/**	 * 获取开奖结果	 * 	 * @return	 */	@RequestMapping({ "/getTestResult.do" })	@ResponseBody	public KaijiangTestResultReturnData getTestResult(HttpServletRequest request) {		KaijiangTestResultReturnData ssp = new KaijiangTestResultReturnData();		if (!super.isLogin()) {			ssp.setResult("请先登录");			return ssp;		}		String qiname = request.getParameter("qiname");		if (qiname == null || qiname.length() <= 0) {			ssp.setResult("期号不存在");			return ssp;		}		Award a = awardService.getByName(qiname);		if (a == null) {			ssp.setResult("该期尚未开奖");			return ssp;		}		ssp.setAwards(a);		User u = super.getLoginUser();		TestDetailExample meExamplee = new TestDetailExample();		meExamplee.clear();		meExamplee.setPageSize(11);		meExamplee.setOrderByClause("number asc");		meExamplee.setPageNo(Pagination.cpn(Integer.valueOf(CommUtil.null2Int(1))));		TestDetailExample.Criteria criteria = meExamplee.createCriteria();		criteria.andQinameEqual(qiname);		criteria.andUserIdEqual(u.getUser_id());		Pagination pList = testdetailService.getObjectListWithPage(meExamplee);		List<TestDetail> details = (List<TestDetail>) pList.getList();		Double amount = 0.0;		Double award = 0.0;		for (TestDetail d : details) {			amount = CommUtil.add(amount, d.getAmount());			award = CommUtil.add(award, d.getAward());		}		ssp.setAmount(amount);		ssp.setAward(award);		ssp.setDetails(details);		ssp.setResult("SUCCESS");		return ssp;	}	@RequestMapping({ "/summary_self_play.do" })	@ResponseBody	public ReturnSummarySelfPlay summary_self_play() {		ReturnSummarySelfPlay ssp = new ReturnSummarySelfPlay();		if (!super.isLogin()) {			ssp.setResult("error_login_first");			return ssp;		}		User u = super.getLoginUser();		String flag = "FAIL";		SelfPlayQuery uq = new SelfPlayQuery();		uq.setType("join");		uq.setUser_id(u.getUser_id());		SummarySelfPlay s1 = this.detailsService.summarySelfPlay(uq);		SelfPlayQuery uq2 = new SelfPlayQuery();		uq2.setType("win");		uq2.setUser_id(u.getUser_id());		SummarySelfPlay s2 = this.detailsService.summarySelfPlay(uq2);		ssp.setAmount(s1.getAmount().replaceAll("-", ""));		ssp.setWin_amount(s2.getAmount());		double win_int = CommUtil.div(Integer.valueOf(s2.getNumcount()),				Integer.valueOf(s2.getNumcount() + s1.getNumcount()));		double win_rate = CommUtil.mul(Double.valueOf(win_int), Integer.valueOf(100));		ssp.setWin_rate(win_rate + "%");		flag = "SUCCESS";		ssp.setResult(flag);		return ssp;	}	@RequestMapping({ "/summary_share_play.do" })	@ResponseBody	public SummarySharePlay summary_share_play() {		SummarySharePlay ssp = new SummarySharePlay();		if (!super.isLogin()) {			ssp.setResult("error_login_first");			return ssp;		}		User u = super.getLoginUser();		String flag = "FAIL";		SharePlayQuery uq = new SharePlayQuery();		uq.setType("join");		uq.setUser_id(u.getUser_id());		ssp = this.detailsService.summarySharePlay(uq);		flag = "SUCCESS";		ssp.setResult(flag);		return ssp;	}	@RequestMapping({ "/summary_play.do" })	@ResponseBody	public SummaryPlay summary_play(@RequestParam(value = "type", required = false) String type,			@RequestParam(value = "startDate", required = false) String startDate,			@RequestParam(value = "endDate", required = false) String endDate,			@RequestParam(value = "roomid", required = false) Long roomid,			@RequestParam(value = "qiname", required = false) String qiname,			@RequestParam(value = "jc", required = false) String jc) {		SummaryPlay result = new SummaryPlay();		String flag = "FAIL";		PlayQuery uq = new PlayQuery();		uq.setEndDate(endDate);		uq.setStartDate(startDate);		uq.setType(type);		uq.setRoomid(roomid);		uq.setQiname(qiname);		uq.setUser_id(jc);		result = this.detailService.summaryPlay(uq);		flag = "SUCCESS";		result.setResult(flag);		return result;	}	@RequestMapping({ "/summary_withdraw.do" })	@ResponseBody	public SummaryWithdraw summary_withdraw(@RequestParam(value = "type", required = false) String type,			@RequestParam(value = "status", required = false) String status,			@RequestParam(value = "startDate", required = false) String startDate,			@RequestParam(value = "endDate", required = false) String endDate,			@RequestParam(value = "jc", required = false) String jc) {		SummaryWithdraw result = new SummaryWithdraw();		String flag = "FAIL";		if ((type != null) && (type.equals("in"))) {			type = "in";			status = "success";		} else {			type = "withdraw";		}		WithdrawQuery uq = new WithdrawQuery();		uq.setEndDate(endDate);		uq.setStartDate(startDate);		uq.setStatus(status);		uq.setType(type);		uq.setUser_id(jc);		result = this.accountService.summaryWithdraw(uq);		flag = "SUCCESS";		result.setResult(flag);		return result;	}	@RequestMapping({ "/summary_users.do" })	@ResponseBody	public SummaryUsers summary_users(@RequestParam(value = "type", required = false) String type,			@RequestParam(value = "startDate", required = false) String startDate,			@RequestParam(value = "endDate", required = false) String endDate,			@RequestParam(value = "jc", required = false) String jc) {		SummaryUsers result = new SummaryUsers();		String flag = "FAIL";		String user_id = "";		String parent_id = "";		if ((type != null) && (type.equals("parent"))) {			user_id = "";			parent_id = jc;		} else {			user_id = jc;			parent_id = "";		}		UserQuery uq = new UserQuery();		uq.setEndDate(endDate);		uq.setStartDate(startDate);		uq.setParent(parent_id);		uq.setUser_id(user_id);		result = this.userService.summaryUsers(uq);		flag = "SUCCESS";		result.setResult(flag);		return result;	}}