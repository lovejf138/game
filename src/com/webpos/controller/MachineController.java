package com.webpos.controller;import java.util.Date;import java.util.Random;import java.util.UUID;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.webpos.entity.Award;import com.webpos.entity.User;import com.webpos.service.AwardService;import com.webpos.service.UserService;import com.webpos.tools.Md5Encrypt;@Controllerpublic class MachineController extends ApiWebABaseController {	private Logger log = Logger.getLogger(getClass());		@Autowired	private UserService userService;	@Autowired	private AwardService awardService;	/**	 * 手动添加用户	 * @param request	 * @param httpSession	 * @param model	 * @param response	 * @return	 */	@RequestMapping({ "/_adduser.do" })	@ResponseBody	public String adduser(HttpServletRequest request, HttpSession httpSession, Model model,			HttpServletResponse response) {				String r = "fail";		if (!super.isAdminLogin()) {			return "请先登录";		}		String minid = request.getParameter("minid");		String number = request.getParameter("number");		String balance = request.getParameter("balance");				long _minid = 0;		int _number=0;		int _balance=0;		try {			_minid=Long.parseLong(minid);			_number=Integer.parseInt(number);			_balance=Integer.parseInt(balance);		}catch(Exception e) {			 _minid = 0;			 _number=0;			 _balance=0;		}		if(_minid==0||_number==0||_balance==0) {			return "参数不对";		}						for(int i=0;i<_number;i++) {						User user = new User();			user.setId(_minid);			user.setAll_eth(0.0);			String user_id = UUID.randomUUID().toString().replace("-", "").toLowerCase();//32位			user_id="0x"+user_id.substring(0, 18);			user.setUser_id(user_id);			user.setBalance(_balance);			user.setPlay_sum(0);			user.setChild_sum(Integer.valueOf(0));			user.setRecharge_sum(0);			user.setWithdraw_sum(0);			user.setPass("1b38d7f30e00dbb410484fc977e7f0085362e016ca3b9e97000057548587a322");			user.setCtime(new Date());			user.setId_md5(Md5Encrypt.md5(user_id));//			user.setId_short(user_id.substring(0, 4) + "*****"//					+ user_id.substring(user_id.length() - 4, user_id.length()));			userService.insertWithId(user);			_minid++;		}				return "SUCCESS";	}			/**	 * 机器人下注	 * @param request	 * @param httpSession	 * @param model	 * @param response	 * @return	 */	@RequestMapping({ "/macjoin.do" })	@ResponseBody	public String macjoin(HttpServletRequest request, HttpSession httpSession, Model model,			HttpServletResponse response) {				String r = "fail";		if (!super.isAdminLogin()) {			return "请先登录";		}		String jq_name = request.getParameter("jq_name");		String jq_minid = request.getParameter("jq_minid");		String jq_maxid = request.getParameter("jq_maxid");		String jq_minamount = request.getParameter("jq_minamount");		String jq_maxamount = request.getParameter("jq_maxamount");								int _minid = 0;		int _maxid=0;		int _minamount=0;		int _maxamount=0;		try {			_minid=Integer.parseInt(jq_minid);			_maxid=Integer.parseInt(jq_maxid);			_minamount=Integer.parseInt(jq_minamount);			_maxamount=Integer.parseInt(jq_maxamount);		}catch(Exception e) {			 _minid = 0;			 _maxid = 0;			 _minamount=0;			 _maxamount=0;		}		if(_minid==0||_maxid==0||_minamount==0||_maxamount==0) {			return "参数不对";		}				if(_minid<=0||_maxid<=0) {			return "id必须大于0";		}		if(_minid>3000||_maxid>3000) {			return "id必须小于3000";		}		if(_maxid<_minid) {			return "最小id不能大于最大id";		}					if(_minamount<10||_maxamount<10) {			return "下注必须大于10";		}		if(_minamount>100||_maxamount>100) {			return "下注必须小于100";		}		if(_maxamount<_minamount) {			return "最小下注不能大于最大下注";		}				/**		 * 判断期号是否存在		 */		Award last_a = awardService.getByName(jq_name);		if (last_a != null) {			return "期号已开过奖";		}				Random random = new Random();				int id = random.nextInt(_maxid)%(_maxid-_minid+1) + _minid;				User user = userService.selectById((long)id);//获得用户				int number = random.nextInt(11)%(11-1+1) + 1;//获得号码				int amount = random.nextInt(_maxamount)%(_maxamount-_minamount+1) + _minamount;//获得下注				if(user.getBalance()<amount) {			return "用户余额不足";		}				r = userService.join((long)1, user.getUser_id(),user.getParent(), user.getId_short(), jq_name, amount,number);				return "SUCCESS";	}}